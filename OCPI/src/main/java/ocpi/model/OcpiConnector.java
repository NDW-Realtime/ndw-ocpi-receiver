/*
 * roaming-location-prd
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ocpi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
/**
 * OcpiConnector
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-31T14:42:19.145134152+02:00[Europe/Amsterdam]")
public class OcpiConnector {
  @JsonProperty("id")
  private String id = null;

  /**
   * Gets or Sets standard
   */
  public enum StandardEnum {
    CHADEMO("CHADEMO"),
    DOMESTIC_A("DOMESTIC_A"),
    DOMESTIC_B("DOMESTIC_B"),
    DOMESTIC_C("DOMESTIC_C"),
    DOMESTIC_D("DOMESTIC_D"),
    DOMESTIC_E("DOMESTIC_E"),
    DOMESTIC_F("DOMESTIC_F"),
    DOMESTIC_G("DOMESTIC_G"),
    DOMESTIC_H("DOMESTIC_H"),
    DOMESTIC_I("DOMESTIC_I"),
    DOMESTIC_J("DOMESTIC_J"),
    DOMESTIC_K("DOMESTIC_K"),
    DOMESTIC_L("DOMESTIC_L"),
    IEC_60309_2_SINGLE_16("IEC_60309_2_single_16"),
    IEC_60309_2_THREE_16("IEC_60309_2_three_16"),
    IEC_60309_2_THREE_32("IEC_60309_2_three_32"),
    IEC_60309_2_THREE_64("IEC_60309_2_three_64"),
    IEC_62196_T1("IEC_62196_T1"),
    IEC_62196("IEC_62196"),
    IEC_62196_T1_COMBO("IEC_62196_T1_COMBO"),
    IEC_62196_T2("IEC_62196_T2"),
    IEC_62196_T2_COMBO("IEC_62196_T2_COMBO"),
    IEC_62196_T3A("IEC_62196_T3A"),
    IEC_62196_T3C("IEC_62196_T3C"),
    TESLA_R("TESLA_R"),
    TESLA_S("TESLA_S");

    private String value;

    StandardEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StandardEnum fromValue(String text) {
      for (StandardEnum b : StandardEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("standard")
  private StandardEnum standard = null;

  /**
   * Gets or Sets format
   */
  public enum FormatEnum {
    SOCKET("SOCKET"),
    CABLE("CABLE");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FormatEnum fromValue(String text) {
      for (FormatEnum b : FormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("format")
  private FormatEnum format = null;

  /**
   * Gets or Sets powerType
   */
  public enum PowerTypeEnum {
    AC_1_PHASE("AC_1_PHASE"),
    AC_3_PHASE("AC_3_PHASE"),
    DC("DC");

    private String value;

    PowerTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PowerTypeEnum fromValue(String text) {
      for (PowerTypeEnum b : PowerTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("power_type")
  private PowerTypeEnum powerType = null;

  @JsonProperty("voltage")
  private Integer voltage = null;

  @JsonProperty("amperage")
  private Integer amperage = null;

  @JsonProperty("tariff_id")
  private String tariffId = null;

  @JsonProperty("terms_and_conditions")
  private String termsAndConditions = null;

  @JsonProperty("last_updated")
  private OffsetDateTime lastUpdated = null;

  public OcpiConnector id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public OcpiConnector standard(StandardEnum standard) {
    this.standard = standard;
    return this;
  }

   /**
   * Get standard
   * @return standard
  **/
  @Schema(required = true, description = "")
  public StandardEnum getStandard() {
    return standard;
  }

  public void setStandard(StandardEnum standard) {
    this.standard = standard;
  }

  public OcpiConnector format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @Schema(required = true, description = "")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public OcpiConnector powerType(PowerTypeEnum powerType) {
    this.powerType = powerType;
    return this;
  }

   /**
   * Get powerType
   * @return powerType
  **/
  @Schema(required = true, description = "")
  public PowerTypeEnum getPowerType() {
    return powerType;
  }

  public void setPowerType(PowerTypeEnum powerType) {
    this.powerType = powerType;
  }

  public OcpiConnector voltage(Integer voltage) {
    this.voltage = voltage;
    return this;
  }

   /**
   * Get voltage
   * @return voltage
  **/
  @Schema(description = "")
  public Integer getVoltage() {
    return voltage;
  }

  public void setVoltage(Integer voltage) {
    this.voltage = voltage;
  }

  public OcpiConnector amperage(Integer amperage) {
    this.amperage = amperage;
    return this;
  }

   /**
   * Get amperage
   * @return amperage
  **/
  @Schema(description = "")
  public Integer getAmperage() {
    return amperage;
  }

  public void setAmperage(Integer amperage) {
    this.amperage = amperage;
  }

  public OcpiConnector tariffId(String tariffId) {
    this.tariffId = tariffId;
    return this;
  }

   /**
   * Get tariffId
   * @return tariffId
  **/
  @Schema(description = "")
  public String getTariffId() {
    return tariffId;
  }

  public void setTariffId(String tariffId) {
    this.tariffId = tariffId;
  }

  public OcpiConnector termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

   /**
   * Get termsAndConditions
   * @return termsAndConditions
  **/
  @Schema(description = "")
  public String getTermsAndConditions() {
    return termsAndConditions;
  }

  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }

  public OcpiConnector lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OcpiConnector ocpiConnector = (OcpiConnector) o;
    return Objects.equals(this.id, ocpiConnector.id) &&
        Objects.equals(this.standard, ocpiConnector.standard) &&
        Objects.equals(this.format, ocpiConnector.format) &&
        Objects.equals(this.powerType, ocpiConnector.powerType) &&
        Objects.equals(this.voltage, ocpiConnector.voltage) &&
        Objects.equals(this.amperage, ocpiConnector.amperage) &&
        Objects.equals(this.tariffId, ocpiConnector.tariffId) &&
        Objects.equals(this.termsAndConditions, ocpiConnector.termsAndConditions) &&
        Objects.equals(this.lastUpdated, ocpiConnector.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, standard, format, powerType, voltage, amperage, tariffId, termsAndConditions, lastUpdated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OcpiConnector {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    standard: ").append(toIndentedString(standard)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    powerType: ").append(toIndentedString(powerType)).append("\n");
    sb.append("    voltage: ").append(toIndentedString(voltage)).append("\n");
    sb.append("    amperage: ").append(toIndentedString(amperage)).append("\n");
    sb.append("    tariffId: ").append(toIndentedString(tariffId)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
